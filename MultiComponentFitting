try:
    from IPython import get_ipython
    get_ipython().magic('clear')
    get_ipython().magic('reset -f')
except:
    pass

import numpy as np
import matplotlib.pyplot as plt
import os
os.chdir(r'C:\Users\user\Documents\Wave propagation aquifers\WavePropagationAquifers-master\src\No_leakage')

from WavePropagationAquifers import WavePropagationAquifers
###############################################################################
### Select Model settings
###############################################################################
tide = np.loadtxt(r'C:\Users\user\Documents\Wave propagation aquifers\WavePropagationAquifers-master\data\river.txt')
BC1 = dict(
    task_name =  'tide_wave', 
    # normalize_time = True,
    normalize_time = False,
    normalize_hs = True,
    )
BC2 = dict(
    task_name = 'square_wave',    
    normalize_time = False,
    normalize_hs = True
    )
BC3 = dict(
    task_name = 'river', 
    normalize_time = False,
    normalize_hs = True,
    #coarsen_time= 6,
    )
piez = dict(
    task_name = 'piez', 
    normalize_time = False,
    normalize_hs = False,
    )

# Read boundary condition and save its piezometer data at x-distance
Ex = WavePropagationAquifers(**BC1)
Ex.read_wave(**BC1) 
Ex.get_piezometric_data(x=400, write_to_file=True)

# Read piezometer data
Ex2 = WavePropagationAquifers(**piez)
Ex2.read_wave(**piez)

# Get most prominent wave of BC with a max-period given. If not given there is no max
Ex.extract_wave_component(max_period=50,threshold=20)
# Get amplitude and phase shift of wave component from the piezometric data based on
# the corresponding wave frequency
Ex2.extract_wave_component(index=Ex.index)

# Recunstruct the wave component from the piezometric data to be fitted
nt = len(Ex2.wave_time)
if np.isscalar(Ex2.index):
    n_fft = 1
else:
    n_fft = len(Ex2.index)
A = np.tile(Ex2.A,(nt,1))
w = np.tile(Ex2.w,(nt,1))
phi = np.tile(Ex2.phi,(nt,1))
t = np.tile(Ex2.wave_time,(n_fft,1)).T
wave_piez = np.sum(A * np.cos(w*t + phi), axis=1)

# Fit wave component and show results
Ex.fit_model(wave_piez = wave_piez)

plt.figure(figsize=(8, 5))
plt.plot(Ex.t_piez, Ex.wave_piez, 'bo', label='h observed')
plt.plot(Ex.t_piez, Ex.result_init_fit, 'k--', label='initial fit')
plt.plot(Ex.t_piez, Ex.result_best_fit, 'r-', label='best fit')
plt.title('Ss/K parameter fit with E =' + str(Ex.Rel_err) + '%')
plt.xlabel('t [d]')
plt.ylabel('h [m]')
plt.grid()
plt.legend(loc='best')
plt.show()

# Show analytical solution of the complex wave with fitted Ss/K
Ex.check_fit_model()

plt.figure(figsize=(8, 5))
plt.plot(Ex.t_piez, Ex.h_piez, 'bo', markersize=3, label='h observed')
plt.plot(Ex.t_piez, Ex.piez_fit, 'r-', label='amplitude fit')
plt.title('Final solution tidal wave')# with E =' + str(Ex.Rel_err) + '%')
plt.xlabel('t [d]')
plt.ylabel('h [m]')
plt.legend(loc='best')
plt.grid()
plt.show()

print('Relative error Ss/K fit = ',Ex.Rel_err)

t_piez = Ex2.wave_time
t_wave = Ex.wave_time

h_piez = Ex2.wave
h_piez2 = np.interp(t_wave,t_piez,h_piez)
